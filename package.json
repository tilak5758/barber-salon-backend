{
  "name": "barber-booking-backend",
  "version": "1.0.0",
  "description": "Complete backend system for barber booking platform with microservices architecture",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest --verbose --coverage",
    "test:watch": "jest --watch",
    "test:ci": "jest --ci --coverage --watchAll=false",
    "lint": "eslint . --ext .js",
    "lint:fix": "eslint . --ext .js --fix",
    "format": "prettier --write .",
    "setup:dev": "npm install && npm run create:indexes && npm run seed:dev",
    "create:indexes": "node scripts/createIndexes.js",
    "seed:dev": "node scripts/seedDatabase.js",
    "cleanup:db": "node scripts/cleanupDatabase.js",
    "backup:db": "node scripts/backupDatabase.js",
    "migrate": "node scripts/migrate.js",
    "health": "node scripts/healthCheck.js",
    "logs": "pm2 logs",
    "restart": "pm2 restart all",
    "stop": "pm2 stop all",
    "build": "npm install --only=production",
    "docker:build": "docker build -t barber-booking-api .",
    "docker:run": "docker run -p 3000:3000 --env-file .env barber-booking-api",
    "deploy:staging": "npm run build && pm2 start ecosystem.staging.js",
    "deploy:production": "npm run build && pm2 start ecosystem.production.js"
  },
  "keywords": [
    "barber",
    "booking",
    "appointment",
    "salon",
    "microservices",
    "nodejs",
    "express",
    "mongodb",
    "jwt",
    "payment",
    "razorpay",
    "stripe",
    "ai",
    "recommendations"
  ],
  "author": {
    "name": "Your Name",
    "email": "your.email@example.com",
    "url": "https://your-website.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/barber-booking-backend.git"
  },
  "bugs": {
    "url": "https://github.com/yourusername/barber-booking-backend/issues"
  },
  "homepage": "https://github.com/yourusername/barber-booking-backend#readme",
  "engines": {
    "node": ">=16.0.0",
    "npm": ">=8.0.0"
  },
  "dependencies": {
    "aws-sdk": "^2.1439.0",
    "axios": "^1.5.0",
    "bcryptjs": "^2.4.3",
    "cheerio": "^1.0.0-rc.12",
    "cloudinary": "^1.40.0",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "cron": "^3.1.3",
    "crypto": "^1.0.1",
    "csv-parser": "^3.0.0",
    "csv-writer": "^1.6.0",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-async-errors": "^3.1.1",
    "express-brute": "^1.0.1",
    "express-brute-mongoose": "^1.1.0",
    "express-brute-redis": "^0.0.1",
    "express-fileupload": "^1.4.0",
    "express-mongo-sanitize": "^2.2.0",
    "express-rate-limit": "^6.10.0",
    "express-slow-down": "^1.6.0",
    "express-validator": "^7.0.1",
    "helmet": "^7.0.0",
    "http-status-codes": "^2.3.0",
    "joi": "^18.0.0",
    "jsdom": "^22.1.0",
    "jsonwebtoken": "^9.0.2",
    "lodash": "^4.17.21",
    "moment-timezone": "^0.5.43",
    "mongoose": "^7.5.0",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "node-cron": "^3.0.2",
    "nodemailer": "^6.9.4",
    "passport": "^0.6.0",
    "passport-facebook": "^3.0.0",
    "passport-google-oauth20": "^2.0.0",
    "passport-jwt": "^4.0.1",
    "qrcode": "^1.5.3",
    "rate-limit-redis": "^3.0.1",
    "razorpay": "^2.9.2",
    "redis": "^4.6.7",
    "sharp": "^0.32.5",
    "socket.io": "^4.7.2",
    "socket.io-redis": "^6.1.1",
    "stripe": "^13.3.0",
    "twilio": "^4.15.0",
    "uuid": "^9.0.0",
    "validator": "^13.11.0",
    "winston": "^3.10.0",
    "winston-daily-rotate-file": "^4.7.1"
  },
  "devDependencies": {
    "@faker-js/faker": "^8.0.2",
    "@types/bcryptjs": "^2.4.6",
    "@types/jest": "^29.5.5",
    "concurrently": "^8.2.1",
    "cross-env": "^7.0.3",
    "eslint": "^8.57.1",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-prettier": "^9.1.2",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-prettier": "^5.5.4",
    "faker": "^5.5.3",
    "husky": "^8.0.3",
    "jest": "^29.6.4",
    "lint-staged": "^16.1.5",
    "mongodb-memory-server": "^8.15.1",
    "nock": "^13.3.3",
    "nodemon": "^3.0.1",
    "prettier": "^3.6.2",
    "redoc-express": "^2.1.0",
    "sinon": "^15.2.0",
    "supertest": "^6.3.3",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "wait-port": "^1.0.4"
  },
  "jest": {
    "testEnvironment": "node",
    "setupFilesAfterEnv": [
      "<rootDir>/tests/setup.js"
    ],
    "testMatch": [
      "<rootDir>/tests/**/*.test.js"
    ],
    "collectCoverageFrom": [
      "**/*.js",
      "!node_modules/**",
      "!coverage/**",
      "!tests/**"
    ],
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ]
  },
  "eslintConfig": {
    "extends": [
      "airbnb-base",
      "prettier"
    ],
    "plugins": [
      "prettier"
    ],
    "env": {
      "node": true,
      "es6": true,
      "jest": true
    },
    "rules": {
      "prettier/prettier": [
        "error",
        {
          "singleQuote": true,
          "parser": "flow"
        }
      ],
      "no-console": "off",
      "no-underscore-dangle": [
        "error",
        {
          "allow": [
            "_id"
          ]
        }
      ],
      "consistent-return": "off",
      "func-names": "off"
    }
  },
  "prettier": {
    "singleQuote": true,
    "trailingComma": "es5",
    "tabWidth": 2,
    "semi": true,
    "printWidth": 100
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run test:ci"
    }
  },
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "prettier --write",
      "git add"
    ]
  },
  "nodemonConfig": {
    "watch": [
      "."
    ],
    "ext": "js,json",
    "ignore": [
      "node_modules/",
      "coverage/",
      "logs/",
      "uploads/",
      "tests/"
    ],
    "delay": "2500",
    "env": {
      "NODE_ENV": "development"
    }
  },
  "pm2": {
    "apps": [
      {
        "name": "barber-booking-api",
        "script": "server.js",
        "instances": "max",
        "exec_mode": "cluster",
        "env": {
          "NODE_ENV": "production",
          "PORT": 3000
        },
        "error_file": "./logs/err.log",
        "out_file": "./logs/out.log",
        "log_file": "./logs/combined.log",
        "time": true,
        "max_memory_restart": "500M",
        "node_args": "--max-old-space-size=1024"
      }
    ]
  }
}
